/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var f=Object.defineProperty;var I=Object.getOwnPropertyDescriptor;var D=Object.getOwnPropertyNames;var L=Object.prototype.hasOwnProperty;var G=(i,a)=>{for(var e in a)f(i,e,{get:a[e],enumerable:!0})},N=(i,a,e,t)=>{if(a&&typeof a=="object"||typeof a=="function")for(let n of D(a))!L.call(i,n)&&n!==e&&f(i,n,{get:()=>a[n],enumerable:!(t=I(a,n))||t.enumerable});return i};var z=i=>N(f({},"__esModule",{value:!0}),i);var B={};G(B,{default:()=>y});module.exports=z(B);var d=require("obsidian");var g=require("obsidian"),j={asanaToken:"",markTaskAsCompleted:!1,pinnedProjects:[],enableMarkdownLink:!0,showArchivedProjects:!1,pinMyTasks:!0},T=class extends g.PluginSettingTab{constructor(e,t){super(e,t);this.plugin=t}display(){let{containerEl:e}=this;e.empty(),new g.Setting(e).setName("Status check").setDesc("check whether API key is saved. It does not guarantee that the API key is valid or invalid.").addButton(s=>{s.setButtonText("API Check").onClick(async()=>{this.plugin.settings.asanaToken.length?new g.Notice("API key exist."):new g.Notice("API key does not exist.")})});let t=document.createDocumentFragment();t.createDiv({text:"Enter your Asana personal access token."}),t.createDiv({text:"For security reasons, the saved API key is not shown in the input field after saving."}),t.createEl("a",{text:"Create access token",href:"https://app.asana.com/0/my-apps"});let n="";new g.Setting(e).setName("Asana personal access token").setDesc(t).addText(s=>{s.inputEl.type="password",s.setValue("").onChange(async o=>{n=o})}).addButton(s=>{s.setButtonText("Save key").onClick(async()=>{this.plugin.settings.asanaToken=n.trim(),await this.plugin.saveSettings(),new g.Notice("Asana API key saved"),n=""})}),new g.Setting(e).setName("Mark task as completed").setDesc("Automatically mark the task as completed in Obsidian after creating it in Asana.").addToggle(s=>{s.setValue(this.plugin.settings.markTaskAsCompleted).onChange(async o=>{this.plugin.settings.markTaskAsCompleted=o,await this.plugin.saveSettings()})}),new g.Setting(e).setName("Enable markdown link").setDesc("Insert a markdown link to the task in the note after task creation.").addToggle(s=>{s.setValue(this.plugin.settings.enableMarkdownLink).onChange(async o=>{this.plugin.settings.enableMarkdownLink=o,await this.plugin.saveSettings()})}),new g.Setting(e).setName("Pin My Tasks").setDesc("Always show My Tasks at the top of the project selector.").addToggle(s=>{s.setValue(this.plugin.settings.pinMyTasks).onChange(async o=>{this.plugin.settings.pinMyTasks=o,await this.plugin.saveSettings()})}),new g.Setting(e).setName("Show archived projects").setDesc("Include archived projects in the project selection modal.").addToggle(s=>{s.setValue(this.plugin.settings.showArchivedProjects).onChange(async o=>{this.plugin.settings.showArchivedProjects=o,await this.plugin.saveSettings()})}),new g.Setting(e).setName("Pinned projects").setDesc("Enter project names or IDs to pin them in the project selection modal.").addTextArea(s=>{s.inputEl.setAttribute("style","min-height: 100px; max-height: 300px; width: 100%; overflow-y: auto; resize: vertical;"),s.setPlaceholder("Enter project names/IDs, one per line").setValue(this.plugin.settings.pinnedProjects.join(`
`)).onChange(async o=>{this.plugin.settings.pinnedProjects=o.split(`
`).map(m=>m.trim()),await this.plugin.saveSettings()})});let r=document.createDocumentFragment(),l=r.createDiv();l.innerHTML='Got a bug, feature request, or success story? <a href="http://ryanbantz.com/feedback/asana-for-obsidian">Share your feedback</a>.  \u{1F4E2}\u{1F4E2}\u{1F4E2}',new g.Setting(e).setName("Feedback").setDesc(r)}};var p=require("obsidian"),h="https://app.asana.com/api/1.0";async function E(i){let a=i.asanaToken;try{let e=await(0,p.requestUrl)({url:`${h}/workspaces`,method:"GET",headers:{Authorization:`Bearer ${a}`}});if(e.status>=200&&e.status<300)return e.json.data;throw new Error(`Asana API Error: ${e.text}`)}catch(e){throw console.error("Failed to fetch Asana workspaces:",e),new Error("Failed to retrieve workspaces from Asana")}}async function b(i,a){let e=a.asanaToken;try{let t=await(0,p.requestUrl)({url:`${h}/workspaces/${i}/projects${a.showArchivedProjects?"":"?is_archived=false"}`,method:"GET",headers:{Authorization:`Bearer ${e}`}});if(t.status>=200&&t.status<300)return t.json.data;throw new Error(`Asana API Error: ${t.text}`)}catch(t){throw console.error("Failed to fetch Asana projects:",t),new Error("Failed to retrieve projects from Asana")}}async function P(i,a){let e=a.asanaToken;try{let t=await(0,p.requestUrl)({url:`${h}/projects/${i}/sections`,method:"GET",headers:{Authorization:`Bearer ${e}`}});if(t.status>=200&&t.status<300)return t.json.data;throw new Error(`Asana API Error: ${t.text}`)}catch(t){throw console.error("Failed to fetch Asana sections:",t),new Error("Failed to retrieve sections from Asana")}}async function $(i,a,e,t,n){let r=n.asanaToken;try{let l=await(0,p.requestUrl)({url:`${h}/tasks`,method:"POST",headers:{Authorization:`Bearer ${r}`,"Content-Type":"application/json"},body:JSON.stringify({data:{name:i,workspace:a,...e?{projects:[e]}:{},assignee:e?void 0:"me"}})});if(l.status>=200&&l.status<300){let s=l.json.data.gid;return t&&await(0,p.requestUrl)({url:`${h}/sections/${t}/addTask`,method:"POST",headers:{Authorization:`Bearer ${r}`,"Content-Type":"application/json"},body:JSON.stringify({data:{task:s}})}),(await(0,p.requestUrl)({url:`${h}/tasks/${s}`,method:"GET",headers:{Authorization:`Bearer ${r}`}})).json.data}else throw new Error(`Asana API Error: ${l.text}`)}catch(l){throw console.error("Failed to create task:",l),new Error("Failed to create task in Asana")}}async function x(i){let a=i.asanaToken;try{let e=await(0,p.requestUrl)({url:`${h}/users/me`,method:"GET",headers:{Authorization:`Bearer ${a}`}});if(e.status>=200&&e.status<300)return console.log(e.json),e.json.data;throw new Error(`Asana API Error: ${e.text}`)}catch(e){throw console.error("Failed to fetch Asana user data:",e),new Error("Failed to retrieve user data from Asana")}}async function M(i,a){let e=a.asanaToken;try{let t=await(0,p.requestUrl)({url:`${h}/users/me/user_task_list?workspace=${i}`,method:"GET",headers:{Authorization:`Bearer ${e}`}});if(t.status>=200&&t.status<300)return t.json.data.gid;throw new Error(`Failed to fetch task list: ${t.text}`)}catch(t){throw console.error("Failed to fetch user task list:",t),new Error("Failed to retrieve user task list from Asana")}}var C=require("obsidian"),A=class extends C.FuzzySuggestModal{constructor(e,t,n,r){super(e);this.selectedItem=null;this.resolved=!1;this.title=t,this.items=n,this.resolve=r}onOpen(){super.onOpen(),this.setTitle(this.title),this.setPlaceholder(this.title)}getItems(){return this.items}getItemText(e){return e.isMyTasks?"\u{1F464} My Tasks":e.isPinned?`\u{1F4CC} ${e.name.replace(/^ðŸ“Œ /,"")}`:e.name}onChooseItem(e,t){this.resolved||(this.selectedItem=e,this.resolved=!0,this.resolve(e))}};var y=class extends d.Plugin{async onload(){await this.loadSettings(),this.addCommand({id:"create-asana-task",name:"Create task",editorCallback:e=>this.createAsanaTask(e)}),this.addSettingTab(new T(this.app,this)),this.registerEvent(this.app.workspace.on("editor-menu",(e,t)=>{e.addItem(n=>{n.setTitle("Create Asana task").setIcon("checkmark").onClick(()=>this.createAsanaTask(t))})}))}onunload(){}async loadSettings(){this.settings=Object.assign({},j,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async createAsanaTask(e){let t=e.getSelection();if(!t){let o=e.getCursor();t=e.getLine(o.line)}t=t.replace(/^\s*(?:[-*]\s*)?(?:\[[ xX]\]\s*)?/,"").trim();let n=await this.promptForTaskDetails();if(!n)return;let{workspaceGid:r,projectGid:l,sectionGid:s}=n;try{let o=await $(t,r,l,s,this.settings);this.updateEditorWithTaskLink(e,o.permalink_url,n.projectName,n.sectionName),this.settings.markTaskAsCompleted&&this.markTaskAsCompleted(e)}catch(o){new d.Notice(`Error creating Asana task: ${o.message}`)}}async promptForTaskDetails(){if(!this.settings.asanaToken)return new d.Notice("Asana Personal Access Token not set in plugin settings."),null;try{let[t,n]=await Promise.all([E(this.settings),x(this.settings)]),r=await this.promptForSelection("Select workspace",t.map(c=>({name:c.name,gid:c.gid})));if(!r)return new d.Notice("Workspace selection was canceled."),null;let l=await b(r.gid,this.settings),s=new Set(this.settings.pinnedProjects),o={name:"My Tasks",gid:n.gid,isPinned:this.settings.pinMyTasks,isMyTasks:!0},m=l.filter(c=>s.has(c.gid)||s.has(c.name)).map(c=>({name:c.name,gid:c.gid,isPinned:!0})),S=l.filter(c=>!s.has(c.gid)&&!s.has(c.name)).map(c=>({name:c.name,gid:c.gid,isPinned:!1})),F=this.settings.pinMyTasks?[o,...m,...S]:[...m,o,...S],v=await this.promptForSelection("Select project",F);if(!v)return new d.Notice("Project selection was canceled."),null;let u,k=null,w=v;if(w.isMyTasks){let c=await M(r.gid,this.settings);u=await P(c,this.settings)}else u=await P(w.gid,this.settings);if(u.length>1){if(k=await this.promptForSelection("Select section",u.map(c=>({name:c.name,gid:c.gid}))),!k)return new d.Notice("Section selection was canceled."),null}else u.length===1?k={name:u[0].name,gid:u[0].gid}:new d.Notice("No sections found. Skipping section selection.");return{workspaceGid:r.gid,projectGid:w.isMyTasks?"":w.gid,sectionGid:k?k.gid:"",projectName:w.name,sectionName:k?k.name:""}}catch(t){return new d.Notice(`Error fetching Asana data: ${t.message}`),null}}async promptForSelection(e,t){return new Promise(n=>{new A(this.app,e,t,l=>{n(l)}).open()})}updateEditorWithTaskLink(e,t,n,r){if(!this.settings.enableMarkdownLink)return;let l=`[asana#${n}/${r}](${t})`,s=e.getSelection();if(s)e.replaceSelection(`${s} ${l}`);else{let o=e.getCursor(),m=e.getLine(o.line);e.setLine(o.line,`${m} ${l}`)}}markTaskAsCompleted(e){let t=e.getCursor(),r=e.getLine(t.line).replace("- [ ]","- [x]");e.setLine(t.line,r)}};
